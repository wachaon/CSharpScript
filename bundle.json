{
  "{F0F55138-D2C4-4FF4-A49C-CB5761886397}": {
    "source": "{\n  \"name\": \"csharpscript\",\n  \"version\": \"0.0.1\",\n  \"description\": \"csharp script\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"bundle\": \"wes bundle usage/example.cs usage/index.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/wachaon/csharpscript.git\"\n  },\n  \"keywords\": [\n    \"csharp\"\n  ],\n  \"author\": \"wachaon\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/wachaon/csharpscript/issues\"\n  },\n  \"homepage\": \"https://github.com/wachaon/csharpscript#readme\"\n}",
    "mapping": {},
    "path": "{csharpscript}/package.json"
  },
  "{A97DA189-581B-4D14-A02C-5E86EEA59687}": {
    "source": "const WShell = require('WScript.Shell')\r\n\r\nconst { readFileSync, writeFileSync, existsFileSync, deleteFileSync } = require('filesystem')\r\nconst { resolve, toWin32Sep, basename, extname } = require('pathname')\r\nconst { forEach, execCommand } = require('utility')\r\nconst { SPACE, LF, rLINE_SEP } = require('text')\r\nconst { isNumber } = require('typecheck')\r\nconst { unnamed } = require('argv')\r\nconst genGUID = require('genGUID')\r\nconst isCLI = require('isCLI')\r\n\r\nif (isCLI(__filename)) {\r\n    const args = unnamed.slice(1)\r\n    console.log(execCommand(`${getCompiler()} ${args.join(SPACE)}`))\r\n} else module.exports = {\r\n    execScript,\r\n    execSource,\r\n    compile,\r\n    pkg: __dirname\r\n}\r\n\r\n// methods\r\nfunction execScript(input, Class, Method, ...params) {\r\n    const source = readFileSync(resolve(process.cwd(), input), 'auto')\r\n    return execSource(source, Class, Method, ...params)\r\n}\r\n\r\nfunction execSource(source, Class, Method, ...params) {\r\n    let args = \"\"\r\n    if (params.length) args = new Array(params.length).fill(\"\").map((arg, i) => `$args[${i}]`).join(', ')\r\n    const code = `\r\n$Source = @\"\r\n${source}\r\n\"@\r\nAdd-Type -Language CSharp -TypeDefinition $Source\r\n[${Class}]::${Method}(${args})\r\n`.split(rLINE_SEP).join(LF)\r\n    const temp = resolve(process.cwd(), genGUID() + '.ps1')\r\n\r\n    try {\r\n        console.weaklog(writeFileSync(temp, code, 'UTF-8'))\r\n        const command = `powershell -ExecutionPolicy Bypass -File \"${toWin32Sep(temp)}\" ${params.map(param => convert(param)).join(SPACE)}`\r\n        return execCommand(command)\r\n    } catch (e) {\r\n        throw e\r\n    } finally {\r\n        console.weaklog(deleteFileSync(temp))\r\n    }\r\n}\r\n\r\nfunction compile(input, options = {}) {\r\n    console.log(() => options)\r\n    options.out = toWin32Sep(\r\n        resolve(\r\n            process.cwd(),\r\n            (\r\n                'out' in options\r\n                    ? options.out\r\n                    : basename(input, extname(input)) + \".exe\"\r\n            )\r\n        )\r\n    )\r\n    const opts = Object.assign({\r\n        target: \"exe\"\r\n    }, options)\r\n\r\n    let params = []\r\n    forEach((value, key) => {\r\n        params.push(`/${key}:${value}`)\r\n    })(opts)\r\n\r\n    const command = `${getCompiler()} ${params.join(\" \")} ${toWin32Sep(resolve(process.cwd(), input))}`\r\n\r\n    console.log(() => command)\r\n    console.log(execCommand(command))\r\n}\r\n\r\n// util\r\nfunction getCompiler() {\r\n    return [\r\n        \"v4.0.30319\",\r\n        \"V3.5\",\r\n        \"V3.0\",\r\n        \"v2.0.50727\",\r\n        \"v1.1.4322\",\r\n        \"v1.0.3705\"\r\n    ]\r\n        .map((ver) => {\r\n            return toWin32Sep(\r\n                resolve(\r\n                    WShell.ExpandEnvironmentStrings(\"%SystemRoot%\"),\r\n                    \"Microsoft.NET/Framework\",\r\n                    ver,\r\n                    \"csc.exe\"\r\n                )\r\n            )\r\n        })\r\n        .find(exe => existsFileSync(exe))\r\n}\r\n\r\nfunction convert(item) {\r\n    if (item === true) return \"$True\"\r\n    if (item === false) return \"$False\"\r\n    if (item == null) return \"$Null\"\r\n    if (isNumber(item)) {\r\n        if (item !== item) \"[double]::NaN\"\r\n        if (item === Number.POSITIVE_INFINITY) return \"[double]::PositiveInfinity\"\r\n        if (item === Number.NEGATIVE_INFINITY) return \"[double]::NegativeInfinity\"\r\n        return item\r\n    }\r\n    return `\"${item}\"`\r\n}",
    "mapping": {},
    "path": "{csharpscript}/index.js"
  },
  "{ED9AE92D-7F41-476D-B2A3-19D9F0640354}": {
    "source": "using System;\r\n\r\npublic class Example {\r\n    public static void Main (params string[] args) {\r\n        Console.WriteLine(args[0]);\r\n    }\r\n}",
    "mapping": {},
    "path": "{csharpscript}/usage/example.cs"
  },
  "{D4DE64A8-634B-455A-B40F-62A3112B5924}": {
    "source": "\r\nconst { resolve } = require('pathname')\r\nconst { compile, execScript, execSource } = require('../index')\r\nconst { execCommand } = require('utility')\r\nconst { readFileSync } = require('filesystem')\r\n\r\nconst script = resolve(__dirname, 'example.cs')\r\nconst exe = resolve(__dirname, 'example.exe')\r\n\r\nconsole.log(() => script)\r\nconsole.log(() => exe)\r\n\r\nconsole.log('compile')\r\ncompile(script, { out: exe })\r\n\r\nconsole.log('execCommand')\r\nconsole.log(execCommand(`${exe} foo`))\r\n\r\nconsole.log('execScript')\r\nconsole.log(execScript(script, 'Example', 'Main', 'bar'))\r\n\r\nconsole.log('execSource')\r\nconsole.log(execSource(readFileSync(script, 'auto'), 'Example', 'Main', 'baz'))",
    "mapping": {},
    "path": "{csharpscript}/usage/index.js"
  }
}